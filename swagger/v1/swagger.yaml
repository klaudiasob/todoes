---
openapi: 3.0.1
info:
  title: Todoes API
  version: v1
  description: "This is the documentation for Version 1 (V1) of the Todoes API.\n
    \         The API requires an bearer token for most endpoints. You can obtain
    an bearer token by signing up using POST /api/v1/users, then sign in using POST
    /users/sign_in.\n          In response, you will receive your unique bearer token
    which you will find it in response headers. "
components:
  securitySchemes:
    basic_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  "/api/v1/users/me/todoes":
    post:
      summary: Create a todo
      tags:
      - Todoes
      security:
      - basic_auth: []
      parameters: []
      responses:
        '201':
          description: todo created
          content: {}
        '400':
          description: invalid request
          content: {}
        '422':
          description: invalid params
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                finished:
                  type: boolean
              required:
              - title
              - description
              - finished
    get:
      summary: Retrieves all users todoes
      tags:
      - Todoes
      security:
      - basic_auth: []
      responses:
        '200':
          description: todoes found
          content: {}
  "/api/v1/users/me/todoes/{todo_id}":
    patch:
      summary: Update a todo
      tags:
      - Todoes
      security:
      - basic_auth: []
      parameters:
      - name: todo_id
        in: path
        schema:
          type: string
          properties:
            todo_id:
              type: integer
          required:
          - todo_id
        required: true
      responses:
        '200':
          description: todo updated
          content: {}
        '400':
          description: invalid request
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                finished:
                  type: boolean
    delete:
      summary: Delete a todo
      tags:
      - Todoes
      security:
      - basic_auth: []
      parameters:
      - name: todo_id
        in: path
        schema:
          type: string
          properties:
            todo_id:
              type: integer
          required:
          - todo_id
        required: true
      responses:
        '204':
          description: todo deleted
          content: {}
  "/api/v1/users":
    post:
      summary: Create a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
          content: {}
        '400':
          description: invalid request
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
              - email
              - password
              - password_confirmation
  "/users/sign_in":
    post:
      summary: Login
      tags:
      - Users
      parameters:
      - name: params
        in: query
        schema:
          type: object
          properties:
            user[email]:
              type: string
            user[password]:
              type: string
          required:
          - user[email]
          - user[password]
      responses:
        '200':
          description: user logged in
          content: {}
  "/api/v1/users/me":
    patch:
      summary: Update a user
      tags:
      - Users
      security:
      - basic_auth: []
      parameters: []
      responses:
        '200':
          description: user updated
          content: {}
        '422':
          description: user not updated
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
    get:
      summary: Retrieve a user
      tags:
      - Users
      security:
      - basic_auth: []
      responses:
        '200':
          description: user found
          content: {}
    delete:
      summary: Delete a user
      tags:
      - Users
      security:
      - basic_auth: []
      responses:
        '204':
          description: user deleted
          content: {}
